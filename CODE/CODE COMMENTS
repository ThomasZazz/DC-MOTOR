Library Dependencies

cpp
#include <Wire.h>
#include <hd44780.h>
#include <hd44780ioClass/hd44780_I2Cexp.h>

These libraries are used to communicate with an **HD44780-compatible LCD over I2C**. They allow for simple display of real-time measurements and system status.


Pin Configuration

cpp
const int PWM_MOTOR = 6;             // PWM signal to control motor speed
const int MOTOR_DIRECTION = 3;       // Direction control pin for H-bridge
const int ENABLE_RIGHT = 7;          // Enable signal for right side of H-bridge
const int ENABLE_LEFT = 8;           // Enable signal for left side of H-bridge

These pins are connected to a motor driver or H-bridge. Full control over the motorâ€™s direction and speed is managed through these signals.

cpp
const int VOLTAGE_PIN = A0;          // Analog input from voltage sensor
const int CURRENT_PIN = A3;          // Analog input from current sensor 

These analog inputs receive sensor data used to measure the voltage and current supplied to the motor.

cpp
const int EMERGENCY_BUTTON = 13;     // Digital input for emergency stop button

This pin is used to detect a pull-down signal when the emergency button is pressed. It's configured with an internal pull-up resistor.


  Calibration & Constants

cpp
const float VCC = 5.0;                      // System supply voltage
const float ADC_RESOLUTION = 1023.0;        // 10-bit ADC resolution
const float VOLTAGE_RATIO = 4.40;           // Voltage divider ratio (calibrated manually)
const float ZERO_CURRENT_VOLTAGE = 2.55;    // Sensor output at 0 A (calibrated manually)
const float CURRENT_SENSITIVITY = 0.066;    // Sensor sensitivity in V/A (e.g., 66mV/A for ACS712-30A)

These constants are used to convert analog readings into real-world voltage and current values. They are **sensor- and circuit-specific**, and may require tuning per hardware setup.


 Timing Constants

cpp
const unsigned long START_DELAY = 20000;    // 20 seconds delay before test starts
const unsigned long TEST_DURATION = 180000; // Test duration of 3 minutes

These delays define the **test automation schedule**, allowing for setup time and fixed test durations.


setup() Function

cpp
void setup() {
  Serial.begin(9600);
  lcd.begin(16, 2);            // Initialize 16x2 LCD
  lcd.backlight();             // Turn on backlight
  lcd.print("Please wait..."); // Inform user

  // Configure pins
  pinMode(...);

  // Enable motor driver outputs (but motor will not spin yet)
  digitalWrite(ENABLE_RIGHT, HIGH);
  digitalWrite(ENABLE_LEFT, HIGH);

  programStartTime = millis(); // Store initial timestamp
}

This function initializes the **LCD, serial monitor, motor pins, and timer**. It does **not** start the motor immediately, allowing time for any last-minute preparations.


loop() Function


Emergency Stop Handler

cpp
if (digitalRead(EMERGENCY_BUTTON) == LOW) {
  analogWrite(PWM_MOTOR, 0);
  testCompleted = true;
  lcd.clear();
  lcd.print("!!! EMERGENCY !!!");
  Serial.println("Emergency stop activated!");
  while (1); // Infinite loop: system halted
}

If the emergency button is pressed, the system immediately shuts down the motor and freezes execution. This is a safety-critical feature.


Test Start Trigger

cpp
if (!testStarted && now - programStartTime >= START_DELAY) {
  analogWrite(PWM_MOTOR, 255);        // Start motor at full speed
  digitalWrite(MOTOR_DIRECTION, LOW); // Set direction
  testStartTime = now;
  testStarted = true;
  lcd.clear();
  lcd.print("Test in progress");
  Serial.println("VOLTAGE\tCURRENT\tPOWER");
}

After a predefined delay (`START_DELAY`), the test begins. The motor is enabled at full speed, and system feedback is initialized.


Early Exit Condition

cpp
if (!testStarted || testCompleted) return;

If the test has not yet started, or has already ended, the loop exits early.


Test Duration Handler

cpp
if (now - testStartTime >= TEST_DURATION) {
  analogWrite(PWM_MOTOR, 0);
  lcd.clear();
  lcd.print("Test complete");
  Serial.println("Test finished");
  testCompleted = true;
  return;
}

After the set test duration, the motor is stopped, and test is marked as complete.


Sensor Reading & Calculation

cpp
float voltageReading = analogRead(VOLTAGE_PIN);
float voltage = (voltageReading * VCC / ADC_RESOLUTION) * VOLTAGE_RATIO;

float currentReading = analogRead(CURRENT_PIN);
float currentVoltage = currentReading * VCC / ADC_RESOLUTION;
float current = (currentVoltage - ZERO_CURRENT_VOLTAGE) / CURRENT_SENSITIVITY;
if (current < 0.0) current = 0.0;

float power = voltage * current;

These calculations convert raw analog inputs to actual voltage (V), current (A), and power (W) values.
Adjust calibration constants for accuracy depending on your sensors.


 Output to LCD

cpp
lcd.setCursor(0, 0);
lcd.print("V:"); lcd.print(voltage, 1); lcd.print("V ");
lcd.print("I:"); lcd.print(current, 3); lcd.print("A");

lcd.setCursor(0, 1);
lcd.print("P:"); lcd.print(power, 1); lcd.print("W ");
lcd.print(" S:100% ");

The first line shows voltage and current; the second shows power and a placeholder "S:100%" (you could replace this with dynamic system status if needed).


 Output to Serial Monitor
cpp
Serial.print("VOLTAGE:"); Serial.print(voltage, 2); Serial.print("\t");
Serial.print("CURRENT:"); Serial.print(current, 3); Serial.print("\t");
Serial.print("POWER:"); Serial.println(power, 2);


Useful for real-time logging or post-analysis via serial monitor or data logging tools.
